// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFollowFieldNames          = builder.RawFieldNames(&UserFollow{})
	userFollowRows                = strings.Join(userFollowFieldNames, ",")
	userFollowRowsExpectAutoSet   = strings.Join(stringx.Remove(userFollowFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userFollowRowsWithPlaceHolder = strings.Join(stringx.Remove(userFollowFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userFollowModel interface {
		Insert(ctx context.Context, data *UserFollow) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserFollow, error)
		Update(ctx context.Context, data *UserFollow) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserFollowModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserFollow struct {
		Id           int64     `db:"id"`             // id
		UserId       int64     `db:"user_id"`        // 用户id
		FollowUserId int64     `db:"follow_user_id"` // 收藏的用户id
		CreateAt     time.Time `db:"create_at"`      // 创建时间
	}
)

func newUserFollowModel(conn sqlx.SqlConn) *defaultUserFollowModel {
	return &defaultUserFollowModel{
		conn:  conn,
		table: "`user_follow`",
	}
}

func (m *defaultUserFollowModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserFollowModel) FindOne(ctx context.Context, id int64) (*UserFollow, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userFollowRows, m.table)
	var resp UserFollow
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFollowModel) Insert(ctx context.Context, data *UserFollow) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userFollowRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.FollowUserId)
	return ret, err
}

func (m *defaultUserFollowModel) Update(ctx context.Context, data *UserFollow) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userFollowRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.FollowUserId, data.Id)
	return err
}

func (m *defaultUserFollowModel) tableName() string {
	return m.table
}
