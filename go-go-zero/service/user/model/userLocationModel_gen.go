// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLocationFieldNames          = builder.RawFieldNames(&UserLocation{})
	userLocationRows                = strings.Join(userLocationFieldNames, ",")
	userLocationRowsExpectAutoSet   = strings.Join(stringx.Remove(userLocationFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userLocationRowsWithPlaceHolder = strings.Join(stringx.Remove(userLocationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userLocationModel interface {
		Insert(ctx context.Context, data *UserLocation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserLocation, error)
		Update(ctx context.Context, data *UserLocation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserLocationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserLocation struct {
		Id       int64     `db:"id"`        // id
		Name     string    `db:"name"`      // 地址名
		CreateBy int64     `db:"create_by"` // 管理员的id
		CreateAt time.Time `db:"create_at"` // 创建时间
		UpdateBy int64     `db:"update_by"` // 管理员的id
		UpdateAt time.Time `db:"update_at"` // 更新时间
	}
)

func newUserLocationModel(conn sqlx.SqlConn) *defaultUserLocationModel {
	return &defaultUserLocationModel{
		conn:  conn,
		table: "`user_location`",
	}
}

func (m *defaultUserLocationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserLocationModel) FindOne(ctx context.Context, id int64) (*UserLocation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLocationRows, m.table)
	var resp UserLocation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLocationModel) Insert(ctx context.Context, data *UserLocation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userLocationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultUserLocationModel) Update(ctx context.Context, data *UserLocation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userLocationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.CreateBy, data.UpdateBy, data.Id)
	return err
}

func (m *defaultUserLocationModel) tableName() string {
	return m.table
}
