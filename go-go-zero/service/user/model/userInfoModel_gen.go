// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userInfoFieldNames          = builder.RawFieldNames(&UserInfo{})
	userInfoRows                = strings.Join(userInfoFieldNames, ",")
	userInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userInfoFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userInfoModel interface {
		Insert(ctx context.Context, data *UserInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserInfo, error)
		Update(ctx context.Context, data *UserInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserInfo struct {
		Id        int64     `db:"id"`         // id(snowflake)
		Username  string    `db:"username"`   // 账户
		Password  string    `db:"password"`   // 密码
		Name      string    `db:"name"`       // 姓名x
		Gender    int64     `db:"gender"`     // 性别
		Phone     string    `db:"phone"`      // 手机号
		Avatar    string    `db:"avatar"`     // 头像url
		Intro     string    `db:"intro"`      // 个人简介
		Location  string    `db:"location"`   // 住址
		LastLogin time.Time `db:"last_login"` // 上次登录时间
		Like      int64     `db:"like"`       // 获赞数
		Status    int64     `db:"status"`     // 用户账户状态
		Done      int64     `db:"done"`       // 成交数
		Call      string    `db:"call"`       // 称号
		Fans      int64     `db:"fans"`       // 粉丝数
		Follow    int64     `db:"follow"`     // 关注数
		Positive  int64     `db:"positive"`   // 好评次数
		Negative  int64     `db:"negative"`   // 差评次数
	}
)

func newUserInfoModel(conn sqlx.SqlConn) *defaultUserInfoModel {
	return &defaultUserInfoModel{
		conn:  conn,
		table: "`user_info`",
	}
}

func (m *defaultUserInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserInfoModel) FindOne(ctx context.Context, id int64) (*UserInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userInfoRows, m.table)
	var resp UserInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfoModel) Insert(ctx context.Context, data *UserInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Username, data.Password, data.Name, data.Gender, data.Phone, data.Avatar, data.Intro, data.Location, data.LastLogin, data.Like, data.Status, data.Done, data.Call, data.Fans, data.Follow, data.Positive, data.Negative)
	return ret, err
}

func (m *defaultUserInfoModel) Update(ctx context.Context, data *UserInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Username, data.Password, data.Name, data.Gender, data.Phone, data.Avatar, data.Intro, data.Location, data.LastLogin, data.Like, data.Status, data.Done, data.Call, data.Fans, data.Follow, data.Positive, data.Negative, data.Id)
	return err
}

func (m *defaultUserInfoModel) tableName() string {
	return m.table
}
