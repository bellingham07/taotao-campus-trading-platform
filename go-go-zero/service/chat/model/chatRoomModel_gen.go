// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatRoomFieldNames          = builder.RawFieldNames(&ChatRoom{})
	chatRoomRows                = strings.Join(chatRoomFieldNames, ",")
	chatRoomRowsExpectAutoSet   = strings.Join(stringx.Remove(chatRoomFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatRoomRowsWithPlaceHolder = strings.Join(stringx.Remove(chatRoomFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	chatRoomModel interface {
		Insert(ctx context.Context, data *ChatRoom) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatRoom, error)
		Update(ctx context.Context, data *ChatRoom) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatRoomModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChatRoom struct {
		Id       int64     `db:"id"`        // id
		CmdtyId  int64     `db:"cmdty_id"`  // 对应的商品信息
		SellerId int64     `db:"seller_id"` // 卖家id
		Seller   string    `db:"seller"`
		BuyerId  int64     `db:"buyer_id"`
		Buyer    string    `db:"buyer"`
		Cover    string    `db:"cover"`
		CreateAt time.Time `db:"create_at"`
		Status   int64     `db:"status"`
	}
)

func newChatRoomModel(conn sqlx.SqlConn) *defaultChatRoomModel {
	return &defaultChatRoomModel{
		conn:  conn,
		table: "`chat_room`",
	}
}

func (m *defaultChatRoomModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChatRoomModel) FindOne(ctx context.Context, id int64) (*ChatRoom, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatRoomRows, m.table)
	var resp ChatRoom
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatRoomModel) Insert(ctx context.Context, data *ChatRoom) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, chatRoomRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.CmdtyId, data.SellerId, data.Seller, data.BuyerId, data.Buyer, data.Cover, data.Status)
	return ret, err
}

func (m *defaultChatRoomModel) Update(ctx context.Context, data *ChatRoom) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatRoomRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CmdtyId, data.SellerId, data.Seller, data.BuyerId, data.Buyer, data.Cover, data.Status, data.Id)
	return err
}

func (m *defaultChatRoomModel) tableName() string {
	return m.table
}
