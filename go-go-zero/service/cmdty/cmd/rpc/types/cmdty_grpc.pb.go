// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: cmdty.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CmdtyService_UpdateCover_FullMethodName      = "/cmdty.CmdtyService/UpdateCover"
	CmdtyService_GetCoverInfoById_FullMethodName = "/cmdty.CmdtyService/GetCoverInfoById"
)

// CmdtyServiceClient is the client API for CmdtyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmdtyServiceClient interface {
	UpdateCover(ctx context.Context, in *CoverReq, opts ...grpc.CallOption) (*CodeResp, error)
	GetCoverInfoById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CoverInfoResp, error)
}

type cmdtyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmdtyServiceClient(cc grpc.ClientConnInterface) CmdtyServiceClient {
	return &cmdtyServiceClient{cc}
}

func (c *cmdtyServiceClient) UpdateCover(ctx context.Context, in *CoverReq, opts ...grpc.CallOption) (*CodeResp, error) {
	out := new(CodeResp)
	err := c.cc.Invoke(ctx, CmdtyService_UpdateCover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdtyServiceClient) GetCoverInfoById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CoverInfoResp, error) {
	out := new(CoverInfoResp)
	err := c.cc.Invoke(ctx, CmdtyService_GetCoverInfoById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmdtyServiceServer is the gateway API for CmdtyService service.
// All implementations must embed UnimplementedCmdtyServiceServer
// for forward compatibility
type CmdtyServiceServer interface {
	UpdateCover(context.Context, *CoverReq) (*CodeResp, error)
	GetCoverInfoById(context.Context, *IdReq) (*CoverInfoResp, error)
	mustEmbedUnimplementedCmdtyServiceServer()
}

// UnimplementedCmdtyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCmdtyServiceServer struct {
}

func (UnimplementedCmdtyServiceServer) UpdateCover(context.Context, *CoverReq) (*CodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCover not implemented")
}
func (UnimplementedCmdtyServiceServer) GetCoverInfoById(context.Context, *IdReq) (*CoverInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoverInfoById not implemented")
}
func (UnimplementedCmdtyServiceServer) mustEmbedUnimplementedCmdtyServiceServer() {}

// UnsafeCmdtyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmdtyServiceServer will
// result in compilation errors.
type UnsafeCmdtyServiceServer interface {
	mustEmbedUnimplementedCmdtyServiceServer()
}

func RegisterCmdtyServiceServer(s grpc.ServiceRegistrar, srv CmdtyServiceServer) {
	s.RegisterService(&CmdtyService_ServiceDesc, srv)
}

func _CmdtyService_UpdateCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdtyServiceServer).UpdateCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmdtyService_UpdateCover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdtyServiceServer).UpdateCover(ctx, req.(*CoverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdtyService_GetCoverInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdtyServiceServer).GetCoverInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmdtyService_GetCoverInfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdtyServiceServer).GetCoverInfoById(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CmdtyService_ServiceDesc is the grpc.ServiceDesc for CmdtyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CmdtyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmdty.CmdtyService",
	HandlerType: (*CmdtyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCover",
			Handler:    _CmdtyService_UpdateCover_Handler,
		},
		{
			MethodName: "GetCoverInfoById",
			Handler:    _CmdtyService_GetCoverInfoById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmdty.proto",
}
