// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cmdtyInfoFieldNames          = builder.RawFieldNames(&CmdtyInfo{})
	cmdtyInfoRows                = strings.Join(cmdtyInfoFieldNames, ",")
	cmdtyInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(cmdtyInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cmdtyInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(cmdtyInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	cmdtyInfoModel interface {
		Insert(ctx context.Context, data *CmdtyInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CmdtyInfo, error)
		Update(ctx context.Context, data *CmdtyInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCmdtyInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CmdtyInfo struct {
		Id        int64     `db:"id"`         // id
		UserId    int64     `db:"user_id"`    // 用户id
		Cover     string    `db:"cover"`      // 封面图片
		Tag       string    `db:"tag"`        // 分类名
		Price     float64   `db:"price"`      // 商品价格
		Brand     string    `db:"brand"`      // 品牌
		Model     string    `db:"model"`      // 型号
		Intro     string    `db:"intro"`      // 商品介绍
		Old       string    `db:"old"`        // 新旧程度
		Status    int64     `db:"status"`     // 商品状态，默认1为草稿，2为发布，0为下架，-1为审核未通过需修改
		CreateAt  time.Time `db:"create_at"`  // 创建时间
		PublishAt time.Time `db:"publish_at"` // 发布时间
		View      int64     `db:"view"`       // 查看数量
		Collect   int64     `db:"collect"`    // 收藏数
		Type      int64     `db:"type"`       // 1为售卖商品，2为收商品
		Like      int64     `db:"like"`       // 点赞数
	}
)

func newCmdtyInfoModel(conn sqlx.SqlConn) *defaultCmdtyInfoModel {
	return &defaultCmdtyInfoModel{
		conn:  conn,
		table: "`cmdty_info`",
	}
}

func (m *defaultCmdtyInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCmdtyInfoModel) FindOne(ctx context.Context, id int64) (*CmdtyInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cmdtyInfoRows, m.table)
	var resp CmdtyInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCmdtyInfoModel) Insert(ctx context.Context, data *CmdtyInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, cmdtyInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Cover, data.Tag, data.Price, data.Brand, data.Model, data.Intro, data.Old, data.Status, data.PublishAt, data.View, data.Collect, data.Type, data.Like)
	return ret, err
}

func (m *defaultCmdtyInfoModel) Update(ctx context.Context, data *CmdtyInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cmdtyInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Cover, data.Tag, data.Price, data.Brand, data.Model, data.Intro, data.Old, data.Status, data.PublishAt, data.View, data.Collect, data.Type, data.Like, data.Id)
	return err
}

func (m *defaultCmdtyInfoModel) tableName() string {
	return m.table
}
