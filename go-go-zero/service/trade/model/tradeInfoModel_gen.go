// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tradeInfoFieldNames          = builder.RawFieldNames(&TradeInfo{})
	tradeInfoRows                = strings.Join(tradeInfoFieldNames, ",")
	tradeInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(tradeInfoFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tradeInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(tradeInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tradeInfoModel interface {
		Insert(ctx context.Context, data *TradeInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TradeInfo, error)
		Update(ctx context.Context, data *TradeInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTradeInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TradeInfo struct {
		Id           int64     `db:"id"`          // id
		BuyerId      int64     `db:"buyer_id"`    // 卖家id
		Buyer        string    `db:"buyer"`       // 卖家名
		SellerId     int64     `db:"seller_id"`   // 买家id
		Seller       string    `db:"seller"`      // 买家名
		CmdtyId      int64     `db:"cmdty_id"`    // 商品id
		BriefIntro   string    `db:"brief_intro"` // 商品名
		Cover        string    `db:"cover"`
		Location     string    `db:"location"`
		Payment      float64   `db:"payment"`
		Status       int64     `db:"status"`
		CreateAt     time.Time `db:"create_at"`      // 创建时间
		IsSellerDone time.Time `db:"is_seller_done"` // 默认0，完成1
		IsBuyerDone  time.Time `db:"is_buyer_done"`  // 默认0，完成1
		SellerDoneAt time.Time `db:"seller_done_at"`
		BuyerDoneAt  time.Time `db:"buyer_done_at"`
	}
)

func newTradeInfoModel(conn sqlx.SqlConn) *defaultTradeInfoModel {
	return &defaultTradeInfoModel{
		conn:  conn,
		table: "`trade_info`",
	}
}

func (m *defaultTradeInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTradeInfoModel) FindOne(ctx context.Context, id int64) (*TradeInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tradeInfoRows, m.table)
	var resp TradeInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTradeInfoModel) Insert(ctx context.Context, data *TradeInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tradeInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.BuyerId, data.Buyer, data.SellerId, data.Seller, data.CmdtyId, data.BriefIntro, data.Cover, data.Location, data.Payment, data.Status, data.IsSellerDone, data.IsBuyerDone, data.SellerDoneAt, data.BuyerDoneAt)
	return ret, err
}

func (m *defaultTradeInfoModel) Update(ctx context.Context, data *TradeInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tradeInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BuyerId, data.Buyer, data.SellerId, data.Seller, data.CmdtyId, data.BriefIntro, data.Cover, data.Location, data.Payment, data.Status, data.IsSellerDone, data.IsBuyerDone, data.SellerDoneAt, data.BuyerDoneAt, data.Id)
	return err
}

func (m *defaultTradeInfoModel) tableName() string {
	return m.table
}
