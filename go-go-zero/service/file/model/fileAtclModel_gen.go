// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fileAtclFieldNames          = builder.RawFieldNames(&FileAtcl{})
	fileAtclRows                = strings.Join(fileAtclFieldNames, ",")
	fileAtclRowsExpectAutoSet   = strings.Join(stringx.Remove(fileAtclFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	fileAtclRowsWithPlaceHolder = strings.Join(stringx.Remove(fileAtclFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	fileAtclModel interface {
		Insert(ctx context.Context, data *FileAtcl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FileAtcl, error)
		Update(ctx context.Context, data *FileAtcl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFileAtclModel struct {
		conn  sqlx.SqlConn
		table string
	}

	FileAtcl struct {
		Id         int64     `db:"id"` // bigint自增
		AtclId     int64     `db:"atcl_id"`
		UserId     int64     `db:"user_id"`
		Url        string    `db:"url"`
		ObjectName string    `db:"objectName"`
		UploadAt   time.Time `db:"upload_at"`
		IsCover    int64     `db:"is_cover"` // 默认为0，封面为1
		Order      int64     `db:"order"`
	}
)

func newFileAtclModel(conn sqlx.SqlConn) *defaultFileAtclModel {
	return &defaultFileAtclModel{
		conn:  conn,
		table: "`file_atcl`",
	}
}

func (m *defaultFileAtclModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFileAtclModel) FindOne(ctx context.Context, id int64) (*FileAtcl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fileAtclRows, m.table)
	var resp FileAtcl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFileAtclModel) Insert(ctx context.Context, data *FileAtcl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, fileAtclRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AtclId, data.UserId, data.Url, data.ObjectName, data.UploadAt, data.IsCover, data.Order)
	return ret, err
}

func (m *defaultFileAtclModel) Update(ctx context.Context, data *FileAtcl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fileAtclRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AtclId, data.UserId, data.Url, data.ObjectName, data.UploadAt, data.IsCover, data.Order, data.Id)
	return err
}

func (m *defaultFileAtclModel) tableName() string {
	return m.table
}
